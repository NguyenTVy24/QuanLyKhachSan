# Generated by Django 3.2.5 on 2024-06-03 22:31

import app.custum_user_manager
import app.enum_type
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=30, unique=True)),
                ('full_name', models.CharField(max_length=128)),
                ('is_active', models.BooleanField(blank=True, default=False)),
                ('password', models.CharField(blank=True, max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('verify_code', models.CharField(blank=True, max_length=10)),
                ('role', models.CharField(choices=[('USER', 'USER'), ('ADMIN', 'ADMIN'), ('SUPER_ADMIN', 'SUPER_ADMIN')], default=app.enum_type.SystemRoleEnum['USER'], max_length=30)),
                ('code_lifetime', models.DateTimeField(blank=True, null=True)),
                ('status_kyc', models.BooleanField(blank=True, default=False)),
                ('soft_delete', models.BooleanField(blank=True, default=False)),
                ('device_token', models.CharField(blank=True, max_length=256, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', app.custum_user_manager.CustomUserManager()),
            ],
        ),
    ]
